1. Review:
  1. 大多数现代操作系统将处理输入/输出的细节分给不同的设备驱动。程序通过输入/输出库来访问设备
驱动。
  2. istream处理输入流：1) 将字符串转换为不同类型的值；2) 从其它位置得到这些字符串。
  3. ostream处理输出流：1) 将不同类型的值转换为字符串；2) 将字符串输出到其它位置。
  4. 从最基本上来看，文件就是一系列标识从0开始的字节。
  5. 文件格式就是规定了字节意义的一组规则。
  6. 程序要求输入/输出的设备有：显示器、键盘、硬盘、打印机等。
  7. 读入文件需要：1) 知道文件的名字； 2) 打开文件； 3) 读入字符串； 4) 关闭文件。
  8. 输出到文件需要： 1) 给文件命名； 2) 打开或创建文件； 3) 写入对象； 4) 关闭文件。
  9. 四种不同的流状态为： 1) good()，操作成功; 2) eof()，输入结束; 3) fail()，不可预知的
事件; 4) bad()，不可预知的严重事件。
  10. a 用户输入越界， 给出越界信息，退出程序； b 得不到值，给出提示，等待重新输入； 
c 用户输入类型错误，给出提示。
  11. 输入的难点在于其格式，如果输入格式不对，是不能够输入正确的数据的，而用户习惯的格式可能是
不同的。
  12. 一般还是输入要比输出出错的几率大。
  13. 将程序分解开来有助于控制程序的质量。
  14. istream 成员函数 clear() 一是可以用来清除 istream 的不良状态，继续输入；二是可以设置
其状态为 fail()，以终止输入。
  15. 对类型 X，通常 << 函数的声明为： ostream& operator<<(ostream& os, X& x); 
>> 函数的声明为： istream& operator>>(istream& is, X& x)
2. Terms
  bad()  istream 的四种流状态之一，表示未预期的严重情况发生了
  buffer  缓存是一种数据结构，用在 ostream 的内部来存储数据。
  clear()  清除或设置 istream 的状态
  close()  读取或写入后，关闭文件
  device driver  设备驱动，大多数现代操作系统将处理输入/输出的细节交给了设备驱动，程序通过
IO库来访问设备驱动，从而完成输入/输出
  eof()  istream 的四种流状态之一，表示碰到文件结尾
  fail()  istream 的四种流状态之一，表示未预期的情况发生了
  file  文件是放在大容量存储上的数据，是标识从0开始的一系统字节
  good()  istream 的四种流状态之一，表示事件成功
  iftream  ifstream 是一种 istream，用来从文件读取数据
  input device  输入设备，用来提供数据的设备，如键盘、触摸板等
  input operator  输入操作符 >>
  iostream  输入/输出流，可用来读取或输出
  istream  输入流，得到字符串，并将字符串转换为不同的类型
  ofstream  ofstream 是 ostream 的一种，用来将数据写至文件
  open()  读取或写入前，用来打开文件
  ostream  输出流，将不同类型的数据转换为字符串，并送出
  output device  输出设备，用来得到数据的设备，如显示器、打印机等
  output operator  输出操作符 <<
  stream state  流状态，istream 将输入变做的四种情况
  structured file  其内容是按一定结构存储的文件
  terminator  终止符，表示输入终止的字符
  unget()  将一个字符退回，以备再次读入
  