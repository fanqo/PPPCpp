1. g++版本号变为：Apple LLVM version 7.3.0 (clang-703.0.31)，编译时出现更多的warning
2. 01.cpp编译后，运行输入"()"，程序(因在终端中运行，亦即书中所说的'window')并不直接退出，而是要再输入一个字符才退出。
3. 02.cpp编译后，运行输入"1+2 q"，程序并不会输出结果(3)，而是直接退出
4. 09.cpp编译后，运行输入"1++2*3;4+5"，程序运行结果为：
   > 1++2*3;4+5;
   = 7
   > = 9
   > 
而输入"1@z;1+3;"，程序运行结果为：
  > 1@z;1+3;
  = Bad token
  Bad token
  Please enter ~~ to exit
输入"1@+2;3+5;"，程序运行结果为：
  > 1@+2;3+5;
  Bad token
  > = 8
  >
5. Review
   1. 第一版运行后继续在这一程序上工作的原因有： a. 有足够的程序来实验自己的想法； b. 真实的程序就这是样演化的； c. 审视最初的要求； d. 查找并调试错误； e. 补充功能； f. 清理代码
   2. 程序读入 1+2; 后，执行的语句为 cout << "= " << val << '\n'; 输出 = val 即 = 3，然后再执行语句 val = expression(); 调用 expression() 函数， expression() 函数调用 term() 函数， term() 函数调用 primary() 函数，primary() 函数调用 ts.get() 得到 t = Token{q}, 这时 t.kind 既不为 '(' 也不为 '8' (primary() 函数中) ，故返回错误 "primary expected" (由 01.cpp 来看)
   3. 为了使数字的类型便于记忆(其类型由 number 来表示， number 就是数字的意思)，所以将数字的类型用 number 来表示，为了防止不小心将 number 的含义(其值)改变了，所以将其定义为 const char
   4. 本着一个函数执行一个逻辑动作的原则，将 main() 函数原来的作用由不同的函数来代替，而 main() 函数则负责来调用不同的逻辑动作，比如，一个用来计算，一个用来保持窗口
   5. 之所以要分割函数，是因为理想状态下，一个函数只执行一个逻辑动作。
   6. 注释的功能是用来解释代码不能解释要部分，比如，一段代码为什么要这样写，或这段代码打算做什么，而不是怎么做。
   7. narrow_cast 用来测试数据转换过程中有没有信息的丢失，若有信息丢失，则抛出错误 "info loss"
   8. 使用符号常量主要是为了便于记忆，符号常量的名字比它所代表的符号本身更有意义。
   9. 良好的代码布局使得程序员读起程序来更容易一些，这样就可以一定程度上防止 bug 的产生，若出现 bug 时也容易排错。
   10. 对于浮点数求余 (%), 有两种处理方法： a. 舍去浮点数的小数部分，当作整数来处理； b. 使用 narrow_cast 来判断浮点数转为整数有无信息丢失，若无信息丢失，则将转换后的整数运行求余运算，若有丢失，则抛出异常 "info loss"
   11. is_declared() 用来判断变量是否已被定义过。它通过查看变量列表中是否存在该变量来判断该变量是否被定义过了。
   12. 处理 let 字符串输入的方法和处理数值输入的方法是一样的，先读入一个字符，判断它是否是字母表中的字符，若是，则将其退回输入流，再以字符串的形式来读入数据，这样就可以把 let 整个当做一个字符串来输入了。
   13. 该计算器程序中可用的变量名规则为： 一串字母和数字，且以字母开头。以其它字符开头的不能作变量名，字符不属于字母或数字的不能出现在变量名中。
   14. 一点一点地增加程序的功能好处在于可以比较容易地实现一功能有限的版本，这样有利于增强自信，同时也提供了一个可供实验其它功能的平台；功能少一般代码也少，易于排错。
   15. 完成基础功能后就应该测试软件。
   16. 添加新功能后要重新测试软件。
   17. 一般一个函数只需完成一个逻辑操作，若一个函数完成的逻辑操作超过了一个，就应该考虑是否要创建另一函数来分担操作。
   18. 选择变量名和函数名时要： a. 名称要有意义，且易于记忆； b. 名称不要太长； c. 名称中不要有特殊字符 (不属于字母或数字的字符)
   19. 添加注释主要用来解释一段代码的目的以及如此写代码的原因，以便日后程序的阅读。
   20. 注释中为该段代码的目的以及写作原因，至于如何完成目的是由代码来体现的。能用代码解释清楚的就不要用注释，注释是来解释代码解释不清楚的东西。
   21. 程序基本上完成了当初设定的目标 (其它目标由于过于困难无法实现，或实现起来会对程序其它部分造成损坏)，且通过一系列测试，并且其代码经过清理，注释仍都有效，这样程序差不多就完成了。
6. Terms
   code layout 代码布局，主要是指代码在源文件中的相对位置、缩进等
   commenting 注释，为源代码语句添加辅助说明，以解释代码本身不能够解释清楚的内容
   error handling 错误处理，使得程序出现异常并排除异常出现原因的过程
   feature creep 对初始版本的代码代码要求实现过多的功能
   maintenance 维护，维持程序的功能，在程序运行出现 bug 后进行排错，使得程序保持其功能的稳健
   recovery 恢复，使程序重新可以运行
   revision history 修改历史，对程序进行修改的记录
   scaffolding 提供给其它函数一个运行的平台
   symbolic constant 符号常量，给常量的一个别名，以便于记忆
   testing 测试，挑选一系列输入，以期程序出现错误，从而修正错误，使程序完成预期的功能

