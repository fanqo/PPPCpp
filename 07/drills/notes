1. calculator08buggy.cpp编译时出现1个错误：no matching constructor for initialization of 'Token' 
  return Token(name,s);
将 struct Token { 改为 class Token { 编译出现19个错误，大多是和使用了private member有关；在class Token { 和 char kind; 之间加入 public: 编译出现1个错误：no matching constructor for initialization of 'Token' 
  return Token(name,s); 
与第一个错误相同；在 class Token 中加入 oken(char ch, string n) :kind{ch}, name{n} { }，编译不再出现错误，运行输入 let v=3/(6+5); 结果为：
  > let v=3/(6+5);
  = get: undefined name t
  > 
将 struct Variable { 做与 struct Token { 同样的修改后，编译也无错误，运行输入 let v=2/(3+5); 结果为：
  > let v=2/(3+5);
  = get: undefined name t
  > 
将 Token Token_stream::get() 中 while(cin.get(ch) && (isalpha(ch) || isdigit(ch))) s=ch; 改为 while(cin.get(ch) && (isalpha(ch) || isdigit(ch))) s+=ch; 编译没有错误，运行输入 let v=2/(3+5); 结果为：
  > let v=2/(3+5);
  = primary expected
"primary expected" 出现在 double primary() 函数中，所以要去该函数中找原因。在 case '(': 中最后加入 return d; 编译运行输入 let z=2*(3+5); 结果为：
  > let z=2*(3+5);
  = 16
  > 
输入 5*(6+7; 结果为：
  > 5*(6+7;
  = '(' expected
将 f (t.kind != ')') error("'(' expected"); 改为： f (t.kind != ')') error("')' expected");  
运行输入 quit 结果为：
  > quit
  = get: undefined name quit
将 Token Token_stream::get() 中 if (s == "quit") return Token(name); 该为 if (s == "quit") return Token(quit); 即可输入 quit 来退出；
运行输入 3%5 结果为：
  > 3%5;
  = 3
  > = primary expected
  > 
需在 double term() 函数中加入 case '%': ...
2. calculator08buggy.cpp 和 01.cpp 中 set_value() 函数 for (int i = 0; i<=names.size(); ++i) 语句可能会导致越界，在 02.cpp 中改正。