1. 大部分的声明是放在头文件中。声明定义了该怎样使用函数、变量、类，给出了函数、变量、类的接口。用之前要“声明”，用的时候要有“定义”。 'double sqrt(double);' 是声明而非定义(无函数体)， 'int a;' 是定义， 'extern int a;' 不是定义，只是声明。声明只是一个接口，而定义则是具体的实现。定义需要占用内存，而声明则不需要。
2. 全局变量越少越好，作用域越大，名字应该越长。
3. 函数的参数是局部变量，每一次调用函数时都会被初始化。
4. 所谓“引用”就是给对象起个新名字。
5. 当函数被调用时，C++会复制该函数的所有参数和局部变量，并将它们放入一数据结构中。由语言的实现来看参数只是另一种局部变量。
6. static 局部变量只在它所在的函数第一次被调用时初始化。
7. Review
   1. 声明只是引入一个名称，它不需要初始值。定义是一种特殊的声明，它要求有初始值。注： int a; 是一个定义，而 extern int a; 只是一个声明。
   2. 要区分函数的定义和函数的声明，只需查看是否具有函数体，若无函数体则是声明，反之则是定义。
   3. 对于变量 a 来说 int a; 即为定义，只有 extern int a; 才只是一个声明。
   4. C++中任一名称(变量名、函数名等)都要声明后才能使用。而第6章的程序中 expression() 调用 term(), term() 调用 primary(), primary() 又调用 expression(), 这是一个循环，需要有一个破口，即要先声明其中一个函数。
   5. int a; 是一个定义。同一作用域两个 int a; 编译时会出现错误： redefinition of 'a'
   6. 未初始化的变量在使用时可能会有一些不易察觉的 bug, 出现一些未定义的行为。
   7. 函数的声明包括函数名，函数返回值的类型以及函数参数的类型，也可包括函数体(定义)。
   8. 缩进可以让我们更好的看到变量的作用域，使得程序更易于维护，减少 bug 的产生。
   9. 头文件用来存放函数、变量的声明，为函数的使用提供一个接口。
   10. 作用域是函数或变量有作用的程序段。从函数、变量的声明开始到该程序段结束，函数、变量是有效的。
   11. 有五种作用域：1) 全局作用域，该作用域中的声明全局有效；2) 命名空间作用域，嵌套在全局作用域或另一命名空间作用域中；3) 类作用域，在一个类中有效；4) 局部作用域，括在 {...} 中或是函数的参数；5) 语句作用域，如 for-语句
   12. 类作用域和局部作用域的区别是，类的作用域包含在一个类里面，可以将其看作局部作用域的一种，即由 {...} 括起来的作用域，而局部作用域还包括另一种形式，即函数的参数列表。
   13. 作用域的主要作用就是使得名称(函数名、变量名)的局部化，避免命名冲突，而全局变量就容易导致命名冲突，要尽量少用全局变量。
   14. pass-by-value 是指调用函数时，被调用函数将其参数的值拷贝一份给它的局部变量，被调用函数对它局部变量的修改不会修改其参数对应的变量；pass-by-reference 相当于给被调用函数的参数一个局部的名称，被调用函数对名称的值的修改其实是修改的参数对应的值。
   15. pass-by-const-reference 不能修改引用参数的局部变量的值，而 pass-by-reference 可以。
   16. swap() 交换两变量的值。
   17. 若 vector 的尺寸可知且较小时，可所采用值传递。
   18. v[i] = ++i; int x = ++i + ++i; 等未定义求值顺序。对这些未定义求值顺序的代码不同的编译器可能会有不同的结果，这使得代码具有不确定性。
   19. x&&y 只有在 x 值为真时才求解 y 的值，并返回 y 的值； x||y 只有在 x 值为假时才求解 y 的值，并返回 y 的值。
   20. 嵌套作用域的有： 1) 函数包含在类里 (成员函数)；2) 类包含在类里 (成员类，只有在类比较复杂时才有用)； 3) 类包含在函数里 (尽量不要去用)； 4) 函数包含在函数里 (局部函数或嵌套函数)，这个 C++ 不支持； 5) 语句块包含在函数或其它语句块中 (嵌套语句块)
   21. 当函数被调用时，其参数及局部变量及其它一些实现如被调用函数返回调用函数的信息等会被拷贝至活动记录中。
   22. call stack 是调用函数时实现的一个数据结构，每调用一个函数该栈增强一个记录，主要为被调用函数的参数、局部变量及其它一些实现信息。
   23. namespace 主要是用来解决重名的问题，防止命名冲突。
   24. 命名空间和类的区别为：命名空间主要是将类、函数、数据、类型等组织成一个有名字的部分，而不需要重新定义一个类型；类是将函数、数据、类型组织到另一个类型中。
   25. using 声明，如 using std::string; 使得我们使用 string 时意味着就是 std::string. 
   26. using 指令，如 using namespace std; 使得我们在使用 std::cin, std::string 等时可以省略 std:: 而直接使用 cin, string 等。命名空间的存在就是为了避免命名冲突，所以一般只对 std 使用 using 指令。一般不在头文件中使用 using 指令，以使得我们确切地知道所使用的名称来自哪里。
   27. std 命名空间包含了 C++ 标准库里面的名称。
8. Terms
   activation record 活动记录，每次调用函数时都会产生一个活动记录，它主要包含被调用函数的参数和局部变量，以及一些其它的实现信息
   argument 参数，被调用函数名后括号中部分，用来将调用函数的数据传递给被调用函数。
   argument passing 参数传递，将调用函数的数据传递给被调用函数
   call stack 活动记录组成的栈
   class scope 类作用域
   const 用来声明常值
   constexpr 用来使得编译器在编译时就对函数求值。
   declaration 声明，将一名称引入一作用域，指出该名称的类型，可有初值。
   definition 定义，声明的一种，要求有初值。
   extern 很少使用，extern 后没有初始值意味着这只是一个声明而不是定义
   forward declaration 使用之前预先声明
   function 函数，给一组动作一个名称。
   function definition 函数定义，指出函数的名称、返回值类型、函数体。
   global scope 全局作用域，从开始定义到程序运行结束都起作用。
   header file 头文件，一组声明，放在一个文件里。
   initializer 初始值，变量或函数定义时给出的值或函数体。
   local scope 局部作用域，位于 {...} 之间或函数参数列表的作用域。
   namespace 命名空间，将类、函数、数据、类型组成一可识别的有名称的部分，该部分没有类型。
   namespace scope 命名空间作用域，命名空间中起作用。
   nested block 嵌套语句块，语句块或函数内包含另一语句块。
   parameter 一般将形式参数叫做 parameter
   pass-by-const-reference 靠引用传递，且不能改变被引用参数的值
   pass-by-reference 引用传递
   pass-by-value 值传递
   recursion 递归，函数直接或间接地调用自己。
   return 用来指定返回值
   return value 返回值
   scope 作用域
   statement scope 语句作用域，如只作用在for循环中
   technicalities 编程语言的具体实现细节
   undeclared identifier 未被声明的标识符，名字在其被声明之前使用了
   using declaration 如 using std::string; 即在 using 后面加上命名空间以及具体的名字
   using directive 如 using namespace std; 即在 using 后面加上关键词 namespce 加上命名空间的名称
