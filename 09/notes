1. class 的成员(成员函数、成员数据)默认为 private，而 struct 成员默认为 public
2. Review:
   1. 类的两部分为 private 部分和 public 部分
   2. 类的接口(interface)为类中用户可以直接访问声明部分；类的实现(implementation)为用户只能间接访问的声明部分
   3. 对类 struct Date { int y; int m; int d; }; 没有办法保证对该类的操作(如赋值)是有效的(如有可能输入-3月，33日等)；不能保证该类的对象在使用前已初始化；用户可以修改该类中任何成员，这可能会弄乱该类的结构。
   4. 使用 init_day() 函数要求用户自己记得在使用该类的对象前对其初始化，而使用 constructor 的话，若类的对象未初始化之前就使用的话会被编译器判定为错误，编译不能通过，则更有效地强制使类的对象用之前初始化
   5. invariant 是指组成一个有效值的论断。即明确指出某一事物满足的条件。
   6. 除非有需要提高程序的性能，不要把成员函数的函数体放在类声明中；函数体超过五行的成员函数不要放在类声明中。
   7. 当我们需要对自己定义的类进行一些操作，而这些操作传统上由一些常见的操作符来体现(比如+、-、>等)，这时我们可以对C++中有的这些操作符进行重载。
   8. 公共接口要少，少的接口容易记全、容易学习，并且不用花太多时间来完成不怎么需要的功能。更小的接口同时意味着当程序出现问题时要排查的函数要更少。
   9. 在成员函数后面加上 const 关键词，意味着该成员函数不会对对象进行修改。
   10. helper functions 最好放在类的定义的外面是因为，一个函数如果可以简单、优雅、有效地在类以外实现，它就应该在类以外实现，这样该函数中若出现 bug 就不至破坏类的对象的数据。(helper functions 的参数一般为它 help 的类的对象)
3. Terms:
   built-in types 内建类型，不需要源代码中声明，编译器就知道其数据结构和可以对其进行操作的运算的类型。
   class 类，类是一种用户定义的类型。用来定义类的部分称为成员。
   const 用来表示不能改变值的变量。
   constructor 构造函数，名称与其所在类相同的成员函数。用来初始化该类的对象。
   destructor 析构函数，用来释放其所在类所用资源的成员函数。
   enum 枚举类型，一种简单的用户自定义类型，其值为一组符号常量。
   enumeration 枚举。
   enumerator 枚举数，枚举类型的值。
   helper function 辅助函数，一种不是成员函数的函数，其参数的类型一般为其辅助的类。
   implementation 实现，类声明中的一部分，用户不直接使用，而是通过类的接口来间接使用。
   in-class initializer 类中初始化器，类的成员声明时指定的初始化器。
   inlining 内联，在类的声明体中定义成员函数。
   interface 接口，类声明中的部分，用户使用类时直接使用它们。
   invariant 不变式，一种规则，用来说明有效的值如何构成。
   representation 表述，类型来表示对象的数据。
   struct 结构体，成员默认为 public 的类。
   structure 结构，数据的存储方式。
   user-defined types 用户定义类型，编译器必须借助源代码中的声明才知道其数据结构及如何操作的类型。
   valid state 对象的值一般称为 state，所以对象的有效值一般称为 valid state
